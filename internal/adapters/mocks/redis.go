// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/redis.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockPubSubInterface is a mock of PubSubInterface interface.
type MockPubSubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubInterfaceMockRecorder
}

// MockPubSubInterfaceMockRecorder is the mock recorder for MockPubSubInterface.
type MockPubSubInterfaceMockRecorder struct {
	mock *MockPubSubInterface
}

// NewMockPubSubInterface creates a new mock instance.
func NewMockPubSubInterface(ctrl *gomock.Controller) *MockPubSubInterface {
	mock := &MockPubSubInterface{ctrl: ctrl}
	mock.recorder = &MockPubSubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubInterface) EXPECT() *MockPubSubInterfaceMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockPubSubInterface) Channel(opts ...redis.ChannelOption) <-chan *redis.Message {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Channel", varargs...)
	ret0, _ := ret[0].(<-chan *redis.Message)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockPubSubInterfaceMockRecorder) Channel(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockPubSubInterface)(nil).Channel), opts...)
}

// MockStringCmdInterface is a mock of StringCmdInterface interface.
type MockStringCmdInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStringCmdInterfaceMockRecorder
}

// MockStringCmdInterfaceMockRecorder is the mock recorder for MockStringCmdInterface.
type MockStringCmdInterfaceMockRecorder struct {
	mock *MockStringCmdInterface
}

// NewMockStringCmdInterface creates a new mock instance.
func NewMockStringCmdInterface(ctrl *gomock.Controller) *MockStringCmdInterface {
	mock := &MockStringCmdInterface{ctrl: ctrl}
	mock.recorder = &MockStringCmdInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringCmdInterface) EXPECT() *MockStringCmdInterfaceMockRecorder {
	return m.recorder
}

// Int mocks base method.
func (m *MockStringCmdInterface) Int() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockStringCmdInterfaceMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockStringCmdInterface)(nil).Int))
}
