// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	net "net"
	reflect "reflect"
	adapters "websocket-confee/internal/adapters"

	gomock "github.com/golang/mock/gomock"
)

// MockwsServiceInterface is a mock of wsServiceInterface interface.
type MockwsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockwsServiceInterfaceMockRecorder
}

// MockwsServiceInterfaceMockRecorder is the mock recorder for MockwsServiceInterface.
type MockwsServiceInterfaceMockRecorder struct {
	mock *MockwsServiceInterface
}

// NewMockwsServiceInterface creates a new mock instance.
func NewMockwsServiceInterface(ctrl *gomock.Controller) *MockwsServiceInterface {
	mock := &MockwsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockwsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwsServiceInterface) EXPECT() *MockwsServiceInterfaceMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockwsServiceInterface) NewReader(conn net.Conn) adapters.ReaderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", conn)
	ret0, _ := ret[0].(adapters.ReaderInterface)
	return ret0
}

// NewReader indicates an expected call of NewReader.
func (mr *MockwsServiceInterfaceMockRecorder) NewReader(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockwsServiceInterface)(nil).NewReader), conn)
}

// ReadClientMessage mocks base method.
func (m *MockwsServiceInterface) ReadClientMessage(reader adapters.ReaderInterface) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClientMessage", reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClientMessage indicates an expected call of ReadClientMessage.
func (mr *MockwsServiceInterfaceMockRecorder) ReadClientMessage(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClientMessage", reflect.TypeOf((*MockwsServiceInterface)(nil).ReadClientMessage), reader)
}

// WriteServerBinary mocks base method.
func (m *MockwsServiceInterface) WriteServerBinary(msg []byte, conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteServerBinary", msg, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteServerBinary indicates an expected call of WriteServerBinary.
func (mr *MockwsServiceInterfaceMockRecorder) WriteServerBinary(msg, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteServerBinary", reflect.TypeOf((*MockwsServiceInterface)(nil).WriteServerBinary), msg, conn)
}

// WriteServerClose mocks base method.
func (m *MockwsServiceInterface) WriteServerClose(msg []byte, conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteServerClose", msg, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteServerClose indicates an expected call of WriteServerClose.
func (mr *MockwsServiceInterfaceMockRecorder) WriteServerClose(msg, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteServerClose", reflect.TypeOf((*MockwsServiceInterface)(nil).WriteServerClose), msg, conn)
}

// MockauthHandlerInterface is a mock of authHandlerInterface interface.
type MockauthHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockauthHandlerInterfaceMockRecorder
}

// MockauthHandlerInterfaceMockRecorder is the mock recorder for MockauthHandlerInterface.
type MockauthHandlerInterfaceMockRecorder struct {
	mock *MockauthHandlerInterface
}

// NewMockauthHandlerInterface creates a new mock instance.
func NewMockauthHandlerInterface(ctrl *gomock.Controller) *MockauthHandlerInterface {
	mock := &MockauthHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockauthHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthHandlerInterface) EXPECT() *MockauthHandlerInterfaceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockauthHandlerInterface) Handle(conn net.Conn, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", conn, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockauthHandlerInterfaceMockRecorder) Handle(conn, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockauthHandlerInterface)(nil).Handle), conn, msg)
}

// MockloggerInterface is a mock of loggerInterface interface.
type MockloggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockloggerInterfaceMockRecorder
}

// MockloggerInterfaceMockRecorder is the mock recorder for MockloggerInterface.
type MockloggerInterfaceMockRecorder struct {
	mock *MockloggerInterface
}

// NewMockloggerInterface creates a new mock instance.
func NewMockloggerInterface(ctrl *gomock.Controller) *MockloggerInterface {
	mock := &MockloggerInterface{ctrl: ctrl}
	mock.recorder = &MockloggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloggerInterface) EXPECT() *MockloggerInterfaceMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockloggerInterface) Error(err string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockloggerInterfaceMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockloggerInterface)(nil).Error), err)
}
