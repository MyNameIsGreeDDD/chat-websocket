// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/event/receive/receiver.go

// Package mock_receive is a generated GoMock package.
package mock_receive

import (
	net "net"
	reflect "reflect"
	adapters "websocket-confee/internal/adapters"

	gomock "github.com/golang/mock/gomock"
)

// MockredisServiceInterface is a mock of redisServiceInterface interface.
type MockredisServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockredisServiceInterfaceMockRecorder
}

// MockredisServiceInterfaceMockRecorder is the mock recorder for MockredisServiceInterface.
type MockredisServiceInterfaceMockRecorder struct {
	mock *MockredisServiceInterface
}

// NewMockredisServiceInterface creates a new mock instance.
func NewMockredisServiceInterface(ctrl *gomock.Controller) *MockredisServiceInterface {
	mock := &MockredisServiceInterface{ctrl: ctrl}
	mock.recorder = &MockredisServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisServiceInterface) EXPECT() *MockredisServiceInterfaceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockredisServiceInterface) Subscribe(channel ...string) adapters.PubSubInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channel {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(adapters.PubSubInterface)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockredisServiceInterfaceMockRecorder) Subscribe(channel ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockredisServiceInterface)(nil).Subscribe), channel...)
}

// MockwsServiceInterface is a mock of wsServiceInterface interface.
type MockwsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockwsServiceInterfaceMockRecorder
}

// MockwsServiceInterfaceMockRecorder is the mock recorder for MockwsServiceInterface.
type MockwsServiceInterfaceMockRecorder struct {
	mock *MockwsServiceInterface
}

// NewMockwsServiceInterface creates a new mock instance.
func NewMockwsServiceInterface(ctrl *gomock.Controller) *MockwsServiceInterface {
	mock := &MockwsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockwsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwsServiceInterface) EXPECT() *MockwsServiceInterfaceMockRecorder {
	return m.recorder
}

// WriteClientBinary mocks base method.
func (m *MockwsServiceInterface) WriteClientBinary(msg []byte, conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteClientBinary", msg, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteClientBinary indicates an expected call of WriteClientBinary.
func (mr *MockwsServiceInterfaceMockRecorder) WriteClientBinary(msg, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteClientBinary", reflect.TypeOf((*MockwsServiceInterface)(nil).WriteClientBinary), msg, conn)
}

// MockloggerInterface is a mock of loggerInterface interface.
type MockloggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockloggerInterfaceMockRecorder
}

// MockloggerInterfaceMockRecorder is the mock recorder for MockloggerInterface.
type MockloggerInterfaceMockRecorder struct {
	mock *MockloggerInterface
}

// NewMockloggerInterface creates a new mock instance.
func NewMockloggerInterface(ctrl *gomock.Controller) *MockloggerInterface {
	mock := &MockloggerInterface{ctrl: ctrl}
	mock.recorder = &MockloggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloggerInterface) EXPECT() *MockloggerInterfaceMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockloggerInterface) Error(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg)
}

// Error indicates an expected call of Error.
func (mr *MockloggerInterfaceMockRecorder) Error(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockloggerInterface)(nil).Error), msg)
}

// Info mocks base method.
func (m *MockloggerInterface) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info.
func (mr *MockloggerInterfaceMockRecorder) Info(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockloggerInterface)(nil).Info), msg)
}
